Practice for Beautiful Soup
Task description:

In this task, you need to implement a parser for collecting statistics from Wikipedia pages. To simplify your task, the necessary pages have already been downloaded and saved on the file system in the wiki / directory (For example, the page https://en.wikipedia.org/wiki/Stone_Age has been saved to the wiki / Stone_Age file). 

The parser is implemented as a parse function, which takes one parameter as an input: path_to_file - path to a file containing the html code of the wikipedia page. It is guaranteed that such a path exists. Your task is to read the file, go through Beautiful Soup through the article, find its body (this is <div id = "bodyContent">) and calculate inside it:

The number of images (img) with a width of at least 200. For example: <img width = "200"> but not <img> and not <img width = "199">
The number of headers (h1, h2, h3, h4, h5, h6), the first letter of the text inside which corresponds to the capital letter E, T or C. For example: <h1> End </h1> or <h5> <span> Contents </ span> </h5>, but not <h1> About </h1> and not <h2> end </h2> and not <h3><span>1</span> <span> End </span> </ h3>
The length of the maximum sequence of links between which there are no other tags that open or close. For example: <p> <span> <a> </a> </span>, <a> </a>, <a> </a> </p> - here are 2 links in a row, because a closing span interrupts the sequence. <p> <a> <span> </span> </a>, <a> </a>, <a> </a> </p> - and here are 3 links in a row, because The span is inside the link, not between links.
The number of lists (ul, ol) not nested in other lists. For example: <ol><li></li> </ol>, <ul><li><ol><li></li></ol></li> </ul> - two non-nested lists (and one nested)
The result of the parse function will be a list of four numbers calculated using the formulas above. Use the following code as a template for your solution:




from bs4 import BeautifulSoup


def parse(path_to_file):    
    # поместите ваш код здесь
    return [imgs, headers, linkslen, lists]


class TestParse(unittest.TestCase):
    def test_parse(self):
        test_cases = (
            ('wiki/Stone_Age', [13, 10, 12, 40]),
            ('wiki/Brain', [19, 5, 25, 11]),
            ('wiki/Artificial_intelligence', [8, 19, 13, 198]),
            ('wiki/Python_(programming_language)', [2, 5, 17, 41]),
            ('wiki/Spectrogram', [1, 2, 4, 7]),)

        for path, expected in test_cases:
            with self.subTest(path=path, expected=expected):
                self.assertEqual(parse(path), expected)


if __name__ == '__main__':
    unittest.main()

